"""
This part of code is the Q learning brain, which is a brain of the agent.
All decisions are made in here.
View more on my tutorial page: https://morvanzhou.github.io/tutorials/
"""
# 编写Sarsa升级版 Q表
# 行为状态，列为动作

# 不同为 Sarsa[入] 在获得奖励时， 不仅更新此奖励前一步，也会更新此次走过的路径 trace_decay 为前面路径所占的比重

import numpy as np
import pandas as pd


class QLearningTable:
    def __init__(self, actions, learning_rate=0.01, reward_decay=0.9, e_greedy=0.9, trace_decay=0.1):
        self.actions = actions
        self.lr = learning_rate
        self.gama = reward_decay
        self.epsilon = e_greedy
        self.q_table = pd.DataFrame(columns=self.actions)

        # 不一样的地方
        self.lambda_ = trace_decay
        self.eligibility_trace = self.q_table.copy()

    def choose_action(self, observation):
        self.check_state_exist(observation)
        if np.random.uniform() < self.epsilon:
            state_action = self.q_table.loc[observation, :]
            state_action = state_action.reindex(np.random.permutation(state_action.index))  # 打乱顺序
            action = state_action.idxmax()
        else:
            action = np.random.choice(self.actions)

        return action

    def learn(self, s, a, r, s_, a_):
        self.check_state_exist(s_)
        q_predict = self.q_table.loc[s, a]
        if s_ != 'terminal':
            q_target = r + self.gama * self.q_table.loc[s_, a_]
        else:
            q_target = r

        error = q_target - q_predict

        # 更改的地方

        # Method1  没有上限
        # self.eligibility_trace.loc[s, a] += 1

        # Method2  为定值 1
        self.eligibility_trace.loc[s, :] *= 0
        self.eligibility_trace.loc[s, a] = 1

        # 更新Q
        self.q_table += self.lr * error * self.eligibility_trace

        # 衰减eligibility
        self.eligibility_trace *= self.gama * self.lambda_

    def check_state_exist(self, state):
        if state not in self.q_table.index:
            to_append = pd.Series(np.zeros(len(self.actions)), index=self.q_table.columns, name=state)
            self.q_table = self.q_table.append(to_append)

            # 改变的地方
            self.eligibility_trace = self.eligibility_trace.append(to_append)
